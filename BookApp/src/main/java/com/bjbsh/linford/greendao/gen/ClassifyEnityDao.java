package com.bjbsh.linford.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bjbsh.linford.bookapp.entity.ClassifyEnity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLASSIFY_ENITY".
*/
public class ClassifyEnityDao extends AbstractDao<ClassifyEnity, Long> {

    public static final String TABLENAME = "CLASSIFY_ENITY";

    /**
     * Properties of entity ClassifyEnity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Classify_id = new Property(0, Long.class, "classify_id", true, "_id");
        public final static Property ClassifyName = new Property(1, String.class, "classifyName", false, "CLASSIFY_NAME");
        public final static Property Sort = new Property(2, Integer.class, "sort", false, "SORT");
        public final static Property Classify_delFlag = new Property(3, Integer.class, "classify_delFlag", false, "CLASSIFY_DEL_FLAG");
    }


    public ClassifyEnityDao(DaoConfig config) {
        super(config);
    }
    
    public ClassifyEnityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLASSIFY_ENITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: classify_id
                "\"CLASSIFY_NAME\" TEXT," + // 1: classifyName
                "\"SORT\" INTEGER," + // 2: sort
                "\"CLASSIFY_DEL_FLAG\" INTEGER);"); // 3: classify_delFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLASSIFY_ENITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ClassifyEnity entity) {
        stmt.clearBindings();
 
        Long classify_id = entity.getClassify_id();
        if (classify_id != null) {
            stmt.bindLong(1, classify_id);
        }
 
        String classifyName = entity.getClassifyName();
        if (classifyName != null) {
            stmt.bindString(2, classifyName);
        }
 
        Integer sort = entity.getSort();
        if (sort != null) {
            stmt.bindLong(3, sort);
        }
 
        Integer classify_delFlag = entity.getClassify_delFlag();
        if (classify_delFlag != null) {
            stmt.bindLong(4, classify_delFlag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ClassifyEnity entity) {
        stmt.clearBindings();
 
        Long classify_id = entity.getClassify_id();
        if (classify_id != null) {
            stmt.bindLong(1, classify_id);
        }
 
        String classifyName = entity.getClassifyName();
        if (classifyName != null) {
            stmt.bindString(2, classifyName);
        }
 
        Integer sort = entity.getSort();
        if (sort != null) {
            stmt.bindLong(3, sort);
        }
 
        Integer classify_delFlag = entity.getClassify_delFlag();
        if (classify_delFlag != null) {
            stmt.bindLong(4, classify_delFlag);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ClassifyEnity readEntity(Cursor cursor, int offset) {
        ClassifyEnity entity = new ClassifyEnity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // classify_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // classifyName
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // sort
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // classify_delFlag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ClassifyEnity entity, int offset) {
        entity.setClassify_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClassifyName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSort(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setClassify_delFlag(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ClassifyEnity entity, long rowId) {
        entity.setClassify_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ClassifyEnity entity) {
        if(entity != null) {
            return entity.getClassify_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ClassifyEnity entity) {
        return entity.getClassify_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
