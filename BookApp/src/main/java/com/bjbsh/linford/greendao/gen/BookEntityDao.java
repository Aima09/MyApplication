package com.bjbsh.linford.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bjbsh.linford.bookapp.entity.BookEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_ENTITY".
*/
public class BookEntityDao extends AbstractDao<BookEntity, Long> {

    public static final String TABLENAME = "BOOK_ENTITY";

    /**
     * Properties of entity BookEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Book_id = new Property(0, Long.class, "book_id", true, "_id");
        public final static Property Book_imgUrl = new Property(1, String.class, "book_imgUrl", false, "BOOK_IMG_URL");
        public final static Property Book_name = new Property(2, String.class, "book_name", false, "BOOK_NAME");
        public final static Property Book_type = new Property(3, String.class, "book_type", false, "BOOK_TYPE");
        public final static Property Book_delFlag = new Property(4, int.class, "book_delFlag", false, "BOOK_DEL_FLAG");
        public final static Property Book_classifyName = new Property(5, String.class, "book_classifyName", false, "BOOK_CLASSIFY_NAME");
    }


    public BookEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BookEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: book_id
                "\"BOOK_IMG_URL\" TEXT NOT NULL ," + // 1: book_imgUrl
                "\"BOOK_NAME\" TEXT NOT NULL ," + // 2: book_name
                "\"BOOK_TYPE\" TEXT NOT NULL ," + // 3: book_type
                "\"BOOK_DEL_FLAG\" INTEGER NOT NULL ," + // 4: book_delFlag
                "\"BOOK_CLASSIFY_NAME\" TEXT NOT NULL );"); // 5: book_classifyName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookEntity entity) {
        stmt.clearBindings();
 
        Long book_id = entity.getBook_id();
        if (book_id != null) {
            stmt.bindLong(1, book_id);
        }
        stmt.bindString(2, entity.getBook_imgUrl());
        stmt.bindString(3, entity.getBook_name());
        stmt.bindString(4, entity.getBook_type());
        stmt.bindLong(5, entity.getBook_delFlag());
        stmt.bindString(6, entity.getBook_classifyName());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookEntity entity) {
        stmt.clearBindings();
 
        Long book_id = entity.getBook_id();
        if (book_id != null) {
            stmt.bindLong(1, book_id);
        }
        stmt.bindString(2, entity.getBook_imgUrl());
        stmt.bindString(3, entity.getBook_name());
        stmt.bindString(4, entity.getBook_type());
        stmt.bindLong(5, entity.getBook_delFlag());
        stmt.bindString(6, entity.getBook_classifyName());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BookEntity readEntity(Cursor cursor, int offset) {
        BookEntity entity = new BookEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // book_id
            cursor.getString(offset + 1), // book_imgUrl
            cursor.getString(offset + 2), // book_name
            cursor.getString(offset + 3), // book_type
            cursor.getInt(offset + 4), // book_delFlag
            cursor.getString(offset + 5) // book_classifyName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookEntity entity, int offset) {
        entity.setBook_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBook_imgUrl(cursor.getString(offset + 1));
        entity.setBook_name(cursor.getString(offset + 2));
        entity.setBook_type(cursor.getString(offset + 3));
        entity.setBook_delFlag(cursor.getInt(offset + 4));
        entity.setBook_classifyName(cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BookEntity entity, long rowId) {
        entity.setBook_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BookEntity entity) {
        if(entity != null) {
            return entity.getBook_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookEntity entity) {
        return entity.getBook_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
